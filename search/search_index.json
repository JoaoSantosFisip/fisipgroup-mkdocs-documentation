{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":"<p>Here contains all the documentation for the company projects and tools.</p>"},{"location":"base_facebooksdk/","title":"Facebook SDK Integration","text":""},{"location":"base_facebooksdk/#openssl-not-found","title":"OpenSSL not found","text":""},{"location":"base_facebooksdk/#debugkeystore","title":"Debug.keystore","text":""},{"location":"base_help-links/","title":"About","text":"<p>Through development several API/SDK/Tools needed to be installed/researched, bellow you will find all the tutorial and references that were used during the development of our content.</p>"},{"location":"base_help-links/#in-app-purchases","title":"In App Purchases","text":"<ul> <li>IAP IN UNITY Easy Integration for BEGINNER! 2023 (UNITY, GOOGLE PLAY AND TESTING!!)</li> <li>Cross-Platform IAP Store Page with Unity IAP in 2023 | Unity Tutorial</li> </ul>"},{"location":"base_help-links/#advertisement","title":"Advertisement","text":"<ul> <li>How to Integrate IronSource SDK in Unity 2023 || Unity Ads Tutorial Series Part-1</li> </ul>"},{"location":"base_help-links/#cloudsave","title":"CloudSave","text":"<ul> <li>CLOUD SAVE In Unity For FREE !! 2023 (UNITY 3D, UNITY GAME SERVICES , AND MORE!!)</li> </ul>"},{"location":"base_help-links/#authentication","title":"Authentication","text":"<ul> <li>AUTHENTICATION IN UNITY Easy Integration for BEGINNER! 2023 UNITY GAMING SERVICES</li> <li>Unity Player Accounts : Multi-Platform Auth Login (Google, Apple, Email &amp; More!) in 9 Easy Minutes</li> </ul>"},{"location":"base_help-links/#addressables","title":"Addressables","text":"<ul> <li>What are Addressables in Unity and How to use to them | Unity Tutorial</li> </ul>"},{"location":"base_help-links/#notifications","title":"Notifications","text":"<ul> <li>How to send Native Notifications on Android and iOS in Unity</li> </ul>"},{"location":"base_help-links/#app-publishing-google-play-console","title":"App publishing - Google Play Console","text":"<ul> <li>How to publish app in Google Play Store | 2024 update</li> </ul>"},{"location":"base_help-links/#custom-packages","title":"Custom Packages","text":"<ul> <li>Creating Custom Packages in Unity! (Tutorial)</li> </ul>"},{"location":"base_help-links/#adobe-sounds","title":"Adobe Sounds","text":"<ul> <li>Adobe Audition SFX</li> </ul>"},{"location":"base_help-links/#external-dependency-manager-for-unity","title":"External Dependency Manager for Unity","text":"<ul> <li>Repository</li> <li>Unity Developer Archives</li> </ul>"},{"location":"base_help-links/#mkdocs","title":"MKDocs","text":"<ul> <li>How To Create STUNNING Code Documentation With MkDocs Material Theme</li> </ul>"},{"location":"base_how_to_edmfu/","title":"How to Install External Dependency Manager for Unity","text":"<ol> <li>Go to Unity Developer Arquives.</li> <li>Download the latest version <code>.tgz</code> file.</li> <li>From there follow our guide on How to add package from tarball....</li> </ol>"},{"location":"base_publish_android/","title":"How to publish for the Android Platform","text":""},{"location":"base_publish_android/#about","title":"About","text":"<p>Here's the documentation on how to publish an apk to the Google's Play Store. </p> <p>Before starting make sure you follow the game's <code>Publish Checklist</code> section first.</p> <p>Google Play Console Dashboard</p>"},{"location":"base_publish_android/#requirements","title":"Requirements","text":"<ul> <li>Google developer account<p>(Should be created with the fisipgroup email)</p></li> <li>Be on FisipGroup's google organization.</li> <li>Have the right permissions.</li> </ul>"},{"location":"base_publish_android/#build-the-apkaab","title":"Build the APK/AAB","text":"<ol> <li>Go to <code>File -&gt; Build Settings</code>.</li> <li>Make sure the <code>Build App Bundle (Google Play)</code> checkmark is on, and the <code>Development Build</code> is off. </li> <li>Go to <code>Player Settings... -&gt; Other Settings</code>.</li> <li>Increment the <code>Bundle Version Code</code> value.<ul> <li>Make sure it's one value above the last published build.</li> <li>If the <code>FisipGroup Addressables</code> custom package is NOT integrated, change the <code>Version</code> to the same value, otherwise it will update automatically. </li> <li>You can find the last published build on the overview page <code>Home -&gt; App -&gt; Releases Overview</code>: Google Play Console Dashboard The highest one on all tracks </li> </ul> </li> <li>Set keystore's password on <code>Publishing Settings</code>. The password should be on a text file inside the project on <code>Assets -&gt; Help -&gt; SigningKeyPassword</code>.      <p>If not contact a developer that worked on the specific game.</p> </li> <li>Go back to <code>Build Settings</code> and press <code>Build</code> or <code>Build and Run</code> to build an <code>.abb</code> file.</li> <li>Save the <code>.abb</code> file on a location of preference.</li> <li>If the <code>FisipGroup Addressables</code> custom package is integrated, select if you want some of the game files to be loaded from the <code>Cloud</code> or be added to the <code>.abb</code> file. </li> </ol>"},{"location":"base_publish_android/#publish-on-google-play-console","title":"Publish on Google Play Console","text":"<ol> <li>Go to the Google Play Console Dashboard.</li> <li>Select the game app you are working on. </li> <li>Go to the <code>Release</code> section and select the type of release.</li> <li>Select <code>Create new release</code>. If the button is greyed out there is a draft of a release already and instead go to <code>Releases -&gt; Edit Release</code>. </li> <li>Drag the <code>.abb</code> file to the App Bundles box. </li> <li>Add the <code>Release name</code> and <code>Release notes</code>.  For the release notes we usually go to gitkraken or trello and get a list of all the tasks done since last release. Only important on <code>production</code> releases. </li> <li>Press <code>Next</code> once the <code>.abb</code> file as been uploaded and the notes added.</li> <li>Select <code>Save and publish</code>.</li> </ol>"},{"location":"base_publish_github/","title":"How to organize release builds on Github","text":""},{"location":"base_publish_github/#about","title":"About","text":"<p>For releases must follow a structure that keeps the repository organized.</p>"},{"location":"base_publish_github/#what-to-do-when-sending-a-production-release","title":"What to do when sending a production release","text":"<p>Before sending a production release we usually merge the <code>develop</code> branch into the <code>release</code> branch and set the name to whatever version we are releasing.</p> <p>Make sure the app was tested thoroughly before doing so.</p> <p></p>"},{"location":"base_publish_ios/","title":"How to publish for the IOS Platform","text":""},{"location":"base_publish_ios/#about","title":"About","text":"<p>Here's the documentation on how to publish an apk to the Apple's App Store. </p> <p>Before starting make sure you follow the game's <code>Publish Checklist</code> section first.</p> <p>App Store Connect Dashboard</p>"},{"location":"base_publish_ios/#requirements","title":"Requirements","text":"<ul> <li>App Store Connect account.<p>(Should be created with the fisipgroup email)</p></li> <li>Be on Fisip Group Ltd organization.</li> <li>At least have the App Manager permission.</li> <li>A mac Computer.<p>(The Xcode project file can be generated on windows, however the publishing part can only be done on mac)</p></li> </ul>"},{"location":"base_publish_ios/#build-the-xcode-project-file","title":"Build the XCode project file","text":"<ol> <li>Go to <code>File -&gt; Build Settings</code>.</li> <li>Make sure  <code>Development Build</code> is off. </li> <li>Go to <code>Player Settings... -&gt; Other Settings</code>.</li> <li>Increment the <code>Build</code> value.<ul> <li>Make sure it's one value above the last published build.</li> <li>If the <code>FisipGroup Addressables</code> custom package is NOT integrated, change the <code>Version</code> to the same value, otherwise it will update automatically. </li> <li>You can find the last published build on <code>Apps -&gt; \"Game\" -&gt; iOS App -&gt; Build</code>: App Store Connect Dashboard </li> </ul> </li> <li>On <code>Target SDK</code> select <code>Device SDK</code>. </li> <li>Go back to <code>Build Settings</code> and press <code>Build</code> or <code>Build and Run</code>.<ul> <li>If building on windows, the <code>Build and Run</code> feature is disabled.</li> </ul> </li> <li>Save the Xcode Project files on a location of preference.</li> <li>If the <code>FisipGroup Addressables</code> custom package is integrated, select if you want some of the game files to be loaded from the <code>Cloud</code> or locally. </li> </ol>"},{"location":"base_publish_ios/#upload-app-for-publishing-from-xcode","title":"Upload app for publishing from XCode","text":"<ol> <li>Open XCode project.<ul> <li>If the <code>Build and Run</code> build option was selected previously, it should open automatically.</li> </ul> </li> <li>On <code>Signing &amp; Capabilities -&gt; Team</code> make sure the right <code>Team</code> is selected. </li> <li>On Xcode select <code>Product -&gt; Archive</code> and wait for it to archive. </li> <li>Once the <code>Archives</code> window opens select <code>Distribute App</code>.</li> <li>Select the <code>Custom</code> option and press <code>Next</code>. </li> <li>Select the <code>App Store Connect</code> option and press <code>Next</code>. </li> <li>Select <code>Upload</code> and press <code>Next</code>. </li> <li>Select <code>Upload your app's symbols</code>, <code>Manage version and build number</code> and press <code>Next</code>. </li> <li>Select <code>Automatically manage signing</code> and press <code>Next</code>. </li> <li>Select <code>Upload</code>. </li> <li>Once the <code>Upload</code> is done press <code>Done</code>.<ul> <li>You can now close the Xcode project.</li> </ul> </li> </ol>"},{"location":"base_publish_ios/#release-app-on-apple-store","title":"Release app on Apple Store","text":"<ol> <li>Go to App Store Connect Dashboard.</li> <li>Go to <code>Apps</code>.</li> <li>Select the games app.</li> <li>Create a new version by pressing the <code>+</code> sign. </li> <li>Name the version and press <code>Create</code>.</li> <li>Scroll down to <code>What's New in This Version</code> and add the patch notes.<ul> <li>For the release notes we usually go to gitkraken or trello and get a list of all the tasks done since last release. Only important on <code>production</code> releases. </li> </ul> </li> <li>Go to <code>Build</code> and add the latest build. </li> <li>Select <code>Add for Review</code>.</li> <li>TODO: Check if another step appears </li> </ol>"},{"location":"custompackage/","title":"Custom Packages","text":""},{"location":"custompackage/#about","title":"About","text":"<p>To help on the development of the games several <code>Custom Packages</code> were created to speed up the development process and remove the need to develop the same thing twice.</p> <p>All the developed custom packages repo's can be found here: Github Repositories</p>"},{"location":"custompackage_addressables_settings/","title":"Recommended Settings","text":""},{"location":"custompackage_addressables_settings/#about","title":"About","text":"<p>Through development we experimented a lot with several settings. We ended up with these ones since we feel these ones match better with the structure we are following at the moment.</p> <p>The <code>Remote</code> load path is already set by the custom package scripts.</p>"},{"location":"custompackage_addressables_settings/#addressableassetsettings","title":"AddressableAssetSettings","text":""},{"location":"custompackage_addressables_settings/#packet-assets","title":"Packet Assets","text":""},{"location":"custompackage_addressables_settings/#default-local-group","title":"Default Local Group","text":"<p>These settings need to be aplied to the other <code>AssetGroups</code>. </p>"},{"location":"custompackage_addressables_setup/","title":"Setup","text":"<p>Github Repository</p> <p>For the <code>Addressables Custom Package</code> to work a small setup is necessary, here's the steps:</p>"},{"location":"custompackage_addressables_setup/#requirements","title":"Requirements","text":"<ul> <li>Unity Services account.</li> <li>Be a member of the FisipGroup organization and have <code>Manager</code> permissions. (Permissions might need necessary, confirm pls)</li> <li>Add dependency packages:<ul> <li>Addressables.</li> <li>Fisipgroup Tools Custom Package.</li> </ul> </li> </ul> <p>More info on how to add custom packages here:  Add package from git URL;</p>"},{"location":"custompackage_addressables_setup/#set-recommended-settings","title":"Set recommended settings","text":"<p>To make sure the addressables work properly we recommend using the recommended settings. They can be found here: Recommended Settings;</p>"},{"location":"custompackage_addressables_setup/#add-info-to-the-scriptable-object","title":"Add Info to the Scriptable Object","text":"<ol> <li>On the Unity project go to <code>Fisipgroup -&gt; Addressables</code>.</li> <li>Add the necessary info.<ul> <li>All the ID's can be found on the <code>Cloud Content Delivery -&gt; Buckets -&gt; \"Platform bucket\" _&gt; GUID's</code>. </li> <li>For the <code>Badge</code> value can be found on the <code>BADGES</code> section, copy and paste the name of the release badge you want to download assets from.</li> </ul> </li> <li>Back to the Unity's <code>FisipGroup Addressables</code> window under <code>Tools</code> select <code>Save and Update</code> to make sure the profile remote URL is updated.</li> </ol>"},{"location":"custompackage_addressables_simulate/","title":"Simulate addressables download in Unity Editor","text":""},{"location":"custompackage_addressables_simulate/#about","title":"About","text":"<p>Sometimes in development we want to simulate the addressables download and cache to test properly if our code is working correctly.</p>"},{"location":"custompackage_addressables_simulate/#simulate-download","title":"Simulate download","text":"<ol> <li>On Unity editor go to <code>Window -&gt; Asset Management -&gt; Addressables -&gt; Groups</code>.</li> <li>Select <code>Play Mode Script -&gt; Simulate Groups (Advanced)</code>.<ul> <li></li> </ul> </li> </ol> <p>After this the addressables will be stored in cache.</p>"},{"location":"custompackage_addressables_simulate/#clear-build-cache","title":"Clear build cache","text":"<ol> <li>On Unity editor go to <code>Window -&gt; Asset Management -&gt; Addressables -&gt; Groups</code>.</li> <li>Select <code>Build -&gt; Clear Build Cache -&gt; All</code>.</li> </ol>"},{"location":"custompackage_addressables_update/","title":"How to Update Addressables","text":""},{"location":"custompackage_addressables_update/#about","title":"About","text":"<p>Here are the steps on how to update the projects <code>Addressables</code> when using the <code>Cloud Content Delivery</code> unity service and our custom package. </p>"},{"location":"custompackage_addressables_update/#requirements","title":"Requirements","text":"<ul> <li>Unity Services account</li> <li>Be a member of the FisipGroup organization and have <code>Manager</code> permissions.</li> <li>Addressables custom package added.</li> </ul>"},{"location":"custompackage_addressables_update/#delete-old-addressable-files","title":"Delete Old Addressable Files","text":"<ol> <li>Go to <code>\"Project Root\" -&gt; ServerData -&gt; \"Selected Platform\"</code>.</li> <li>Delete all files inside folder. </li> </ol>"},{"location":"custompackage_addressables_update/#build-addressables","title":"Build addressables","text":"<ol> <li>Go to <code>FisipGroup -&gt; Addressables</code>.</li> <li>On <code>Badge</code> select which badge you want to build to or create a new one.<ul> <li>On Unity Services Dashboard go to <code>Cloud Content Delivery -&gt; Buckets -&gt; Select right Bucket -&gt; Badges</code> to see what badges are available and create a new one. </li> <li>If the changes are very minor and you don't need to create a new whole release you can just set the last used <code>Badge</code> to the this release.</li> </ul> </li> <li>Under the <code>Tools</code> section select <code>Save and Update</code>.</li> <li>Go to <code>Window -&gt; Asset management -&gt; Addressables -&gt; Groups</code>.</li> <li>Select <code>Build -&gt; New Build -&gt; Default Build Script</code>. </li> </ol>"},{"location":"custompackage_addressables_update/#update-unity-services","title":"Update Unity Services","text":"<ol> <li>Go to Unity Services.</li> <li>Go to <code>Cloud Content Delivery -&gt; Buckets</code>.</li> <li>Select the correct platform bucket for the game. </li> <li>Press <code>Remove All Entries</code>. </li> <li>Go to <code>Upload Content</code>.</li> <li>Enable <code>Automatically create release after the upload</code>.</li> <li>Drop the new built files.</li> <li>Press <code>Upload \"x\" Files</code>.</li> <li>Add notes describing the changes on these new addressables.</li> <li>Select the <code>Badge</code> you are going to use on this release.<ul> <li>If you haven't created the <code>Badge</code> for the new release beforehand you can do so after the upload. </li> </ul> </li> <li>Press <code>Upload &amp; Create Release</code>.</li> <li>Once the upload is done select <code>Refresh Page</code>.</li> </ol>"},{"location":"custompackage_addressables_update/#create-or-set-new-badge","title":"Create or set new Badge","text":"<ol> <li> <ul> <li>On Unity Services Dashboard go to <code>Cloud Content Delivery -&gt; Buckets -&gt; Select right Bucket -&gt; Badges</code>. </li> </ul> </li> </ol>"},{"location":"custompackage_addressables_update/#create-new-badge","title":"Create new Badge","text":"<ol> <li>Select <code>Add new</code>.</li> <li>Enter the new badge name.</li> <li>Select which release you want to have that badge.</li> <li>Press <code>Submit</code>.</li> </ol>"},{"location":"custompackage_addressables_update/#set-new-badge","title":"Set new Badge","text":"<p>If the changes are very minor and you feel like you don't need to create a new whole release you can just set the last used <code>Badge</code> to the latest release.</p> <ol> <li>Select the <code>Three dot</code> icon on the right of the badge and select <code>Edit Badge</code>.</li> <li>Select which release you want to have that badge.</li> <li>Press <code>Submit</code>.</li> </ol>"},{"location":"custompackage_addressables_update/#update-info-scriptable-object","title":"Update Info Scriptable Object","text":"<ol> <li>On the unity project go to <code>FisipGroup -&gt; Addressables</code>.</li> <li>Update <code>Ios Release ID</code> or <code>Android Release ID</code> with the new <code>Release ID</code>.<ul> <li>All the ID's can be found on the <code>Cloud Content Delivery -&gt; Buckets -&gt; \"Platform bucket\" _&gt; GUID's</code>.</li> </ul> </li> <li>Select <code>File -&gt; Save</code> to make sure the changes are added.</li> </ol>"},{"location":"custompackage_addressables_update/#test","title":"Test","text":"<p>Build apk for device and test if working properly.</p>"},{"location":"custompackage_appupdate_about/","title":"About","text":"<p>This package was designed to streamline the management of app updates. Its primary function is to detect when an update or major update is available and facilitate the app's behavior in response.</p>"},{"location":"custompackage_appupdate_majorupdates/","title":"Major Updates","text":"<p>Whenever we have a update that contains big changes that we feel the need to have every player at, we set it as <code>Major</code>.</p>"},{"location":"custompackage_appupdate_majorupdates/#how-to-set-an-update-as-major","title":"How to set an update as Major","text":"<ol> <li>Go to Unity Cloud and go to the <code>Remote Config</code> section.</li> <li>Select the right <code>Environment</code>.</li> <li>Find the variable with the name <code>MajorVersions</code>.</li> <li>On the <code>versions</code> array, add the number of the apps version you want to set as major.</li> </ol> <p>For <code>Major Updates</code> to work properly its required that both platforms have the same versions, since these values will apply for both platforms.</p>"},{"location":"custompackage_appupdate_setup/","title":"Setup","text":"<p>Github Repository</p> <p>For the <code>AppUpdate Custom Package</code> to work a small setup is necessary, here's the steps:</p>"},{"location":"custompackage_appupdate_setup/#requirements","title":"Requirements","text":"<ul> <li>GooglePlay AppUpdate Package</li> <li>Add dependency packages:<ul> <li>FisipGroup Tools Custom Package</li> <li>Unity TextMeshPro</li> <li>Unity Remote Config</li> </ul> </li> </ul> <p>More info on how to add custom packages here:  Add package from git URL;</p>"},{"location":"custompackage_appupdate_setup/#add-info-to-the-scriptable-object","title":"Add Info to the Scriptable Object","text":"<ol> <li>On the Unity project go to <code>Fisipgroup -&gt; App Update</code>.</li> <li>Add the necessary info.<ul> <li>The <code>Apple App ID</code> can be found on Apple Store Connect on <code>General -&gt; App Information Section</code>.</li> </ul> </li> </ol>"},{"location":"custompackage_appupdate_tools/","title":"Tools","text":"<p>On the <code>AppUpdate</code> info scriptable object several tools can be found for testing purposes on the Unity Editor. </p> <p>To access these tools on the Unity project go to <code>Fisipgroup -&gt; Addressables</code>.</p> <p>You can check both <code>Set Update Available</code> or <code>Set Major Update Available</code> to simulate the app having specific types of updates.</p> <p><code>Set Major Update Available</code> will only work if <code>Set Update Available</code> is enabled.</p> <p></p>"},{"location":"custompackage_cloudsave/","title":"Welcome to MkDocs","text":"<p>For full documentation visit mkdocs.org.</p>"},{"location":"custompackage_guide_giturl/","title":"How to install a package via git URL","text":"<ol> <li>Find the github's repository page of the package you want to add.</li> <li>On the unity project go to <code>Window -&gt; Package Manager</code>.</li> <li>Press the plus sign on the top left of the window and select <code>Add package from git URL...</code>. </li> <li>Paste the <code>git URL</code> and select <code>Add</code>.<ul> <li>The <code>git URL</code> can be found on the github's repo page <code>&lt;&gt; Code</code> section. </li> </ul> </li> <li>Make sure you add the dependency packages as well.</li> </ol>"},{"location":"custompackage_guide_tarball/","title":"How to install a package via tarball","text":"<ol> <li>Download the <code>.tgz</code> file.</li> <li>Unzip the file.</li> <li>On the Unity project go to <code>Windows -&gt; Package Manager</code>.</li> <li>Select the <code>+</code> sign and select <code>Add package from tarball...</code>.</li> <li>Find the <code>package.json</code> inside the folder you unzipped.</li> <li>Select <code>Open</code>.</li> </ol>"},{"location":"custompackage_guide_update/","title":"How to update packages","text":"<ol> <li>On the unity project go to <code>Window -&gt; Package Manager</code>.</li> <li>Select the package you want to update.<ul> <li>Our packages should be on the <code>Packages - FisipGroup</code> section.</li> </ul> </li> <li>Select <code>Update</code>.<ul> <li>The <code>Update</code> button will always be available to press even if no extra update is available if it is a <code>custom package</code>.</li> </ul> </li> </ol>"},{"location":"custompackage_notifications_setup/","title":"Setup","text":"<p>Github Repository</p> <p>For the setup you only need to add the custom package and its dependencies.</p> <p>More info on how to add custom packages on: Add package from git URL;</p>"},{"location":"custompackage_notifications_setup/#requirements","title":"Requirements","text":"<ul> <li>Add dependency packages:<ul> <li>Unity Notifications package.</li> </ul> </li> </ul>"},{"location":"custompackage_tools/","title":"Welcome to MkDocs","text":"<p>For full documentation visit mkdocs.org.</p>"},{"location":"custompackage_tools/#commands","title":"Commands","text":"<ul> <li><code>mkdocs new [dir-name]</code> - Create a new project.</li> <li><code>mkdocs serve</code> - Start the live-reloading docs server.</li> <li><code>mkdocs build</code> - Build the documentation site.</li> <li><code>mkdocs -h</code> - Print help message and exit.</li> </ul>"},{"location":"custompackage_tools/#project-layout","title":"Project layout","text":"<p>\u00b4\u00b4 qwe \u00b4\u00b4 mkdocs.yml    # The configuration file.     docs/         index.md  # The documentation homepage.         ...       # Other markdown pages, images and other files.</p>"},{"location":"games_mowermayhem_gdd/","title":"MOWER MAYHEM Game Design Document","text":"<p>Google Docs</p>"},{"location":"games_mowermayhem_gdd/#introduction","title":"Introduction","text":""},{"location":"games_mowermayhem_gdd/#overview","title":"Overview","text":"<p>Mower Mayhem is an immersive, action-packed game where players take on the role of a skilled landscaper battling against time, enemies, and obstacles to transform ordinary lawns into legendary masterpieces.</p>"},{"location":"games_mowermayhem_gdd/#description-of-concept","title":"Description of Concept","text":"<p>In the bustling world of [Game Title], players step into the shoes of a skilled landscaper with a mission to transform ordinary lawns into legendary masterpieces. The game introduces a dynamic blend of hyper-casual and action-packed gameplay, where the art of lawn mowing becomes a thrilling adventure.</p> <p>Embark on a journey across thematic worlds and real-world farms, each presenting unique challenges and obstacles. The core concept revolves around the player's ability to cut all the grass within a designated time frame while navigating through a variety of static obstacles and encountering mischievous enemies like moles, tractors (in later development), bees, and crows (also in later development).</p> <p>The gameplay loop involves selecting a level, attempting to complete it successfully, and earning coins that can be utilized to upgrade the lawnmower. As players progress through levels, they unlock new challenges and encounter escalating difficulty, ensuring a satisfying and competitive experience.</p> <p>The game's central objectives include mastering the art of precision lawn mowing, avoiding obstacles and enemy attacks, and strategically upgrading the lawnmower for enhanced performance. Collectables such as badges, coins, and health add an extra layer of engagement to the gameplay.</p> <p>[Game Title] sets itself apart with its unique selling points, delivering a perfect balance of competitiveness, visually stunning landscapes, and opportunities for character personalization. Drawing inspiration from iconic titles like Minecraft, Hill Climb Racing, and Breath of the Wild, the game promises not only a satisfying gameplay experience but also a visually immersive journey through diverse environments.</p> <p>Get ready to dive into the world of [Game Title], where every mow counts, and the race against time transforms mundane lawns into legendary turf triumphs.</p>"},{"location":"games_mowermayhem_gdd/#objective-and-goals","title":"Objective and Goals","text":"<p>Cut all grass within the time frame. Avoid obstacles/enemies attacks. Upgrade vehicle features. Collectables Badges (Leaderboards Token) - position on leaderboard based on total. Coins Health</p>"},{"location":"games_mowermayhem_gdd/#game-concept","title":"Game Concept","text":""},{"location":"games_mowermayhem_gdd/#high-level-overview","title":"High-Level Overview","text":"<p>[Game Title] offers a unique blend of hyper-casual and action gameplay, challenging players to become the ultimate landscaper. With a focus on satisfying gameplay and competitive elements, the game combines amazing visuals with character personalization for an engaging experience. Inspired by titles like Minecraft, Hill Climb Racing, and Breath of the Wild, [Game Title] promises an exciting journey through thematic worlds and real-world farms.</p>"},{"location":"games_mowermayhem_gdd/#target-audience","title":"Target Audience","text":"<p>Plus Twelve. ( 12+ ) Unique Selling Points Satisfying gameplay. Perfect amount of competitiveness. Amazing Visuals. Character personalization.</p>"},{"location":"games_mowermayhem_gdd/#inspirations-and-influence","title":"Inspirations and Influence","text":"<p>Minecraft - Sound design. Hill climb Racing - Upgrade system. Breath of the wild - Visual style.</p>"},{"location":"games_mowermayhem_gdd/#genre-and-setting","title":"Genre And Setting","text":"<p>Game Genre Hyper casual / Action </p>"},{"location":"games_mowermayhem_gdd/#setting-and-world","title":"Setting and World","text":"<p>Farms that compete in mowing competitions. Modern setting plus extra thematic worlds.</p> <p>Environment Settings: Real world farm.</p>"},{"location":"games_mowermayhem_gdd/#gameplay-mechanics","title":"Gameplay Mechanics","text":""},{"location":"games_mowermayhem_gdd/#core-gameplay-loop","title":"Core Gameplay Loop","text":"<p>Select a level Try to complete the level Upgrade the lawnmower</p>"},{"location":"games_mowermayhem_gdd/#player-objectives","title":"Player Objectives","text":"<p>After entering a level, the player needs to cut all the grass from the level while trying to dodge obstacles and enemies. The level ends successfully when all grass is cut, or it fails if the player is hit by an obstacle or enemy. Grab Collectables. Upgrade vehicle.</p>"},{"location":"games_mowermayhem_gdd/#controls","title":"Controls","text":"<p>To control the main character, the player will use a touch analog.</p> <p>Vertical Screen</p>"},{"location":"games_mowermayhem_gdd/#progression-system","title":"Progression System","text":"<p>After completing a level successfully, the next level is unlocked. With the coins earned from the levels the player can upgrade their vehicle.</p>"},{"location":"games_mowermayhem_gdd/#levels-and-challenges","title":"Levels and Challenges","text":"<p>Every level will be unique and will have its set of challenges. The main challenge will be cutting all grass under a time limit while dodging enemy attack\u2019s and obstacles. Static Obstacles: Rocks Tree Enemies: Mole Tractor [Later Development] Bees [Later Development] Crow [Later Development]</p>"},{"location":"games_mowermayhem_gdd/#characters","title":"Characters","text":""},{"location":"games_mowermayhem_gdd/#playable-characters","title":"Playable Characters","text":"<p>[Add main character description here]</p>"},{"location":"games_mowermayhem_gdd/#non-playable-characters","title":"Non-Playable Characters","text":"<p>Enemies: Mole</p>"},{"location":"games_mowermayhem_gdd/#user-interface","title":"User Interface","text":"<p>Main Menu Start Garage/Store Settings Music Sound Unlock Ads Start&gt;Level Select Back Button Levels Brief level description Time to complete Highscores Loading Fisip Group Logo In game Countdown to start Joystick Vehicle Health Currency Time to Complete Pause Settings Quit Restart Win/Lose Time Finished/Game Over Currency Gained, unless lost Highscore Check? Extra Time, with Ads/Revive, with Ads Redo/Try again</p>"},{"location":"games_mowermayhem_gdd/#art-and-visuals","title":"Art and Visuals","text":"<p>Mix farming and racing elements, and have a UI to match. Audio and Music Music: Main menu Gameplay Audio: Menu button clicks Race begin. Race countdown Race end Grass cut</p>"},{"location":"games_mowermayhem_gdd/#level-design","title":"Level Design","text":"<p>Overview of Levels For the creation of the levels, a procedural level creation system will be created to help with development.  This system will be responsible in generating: Map layouts Obstacles Enemies Coins Decoration Grass Background Completion Time Save Level into file Load file into Level The system will also have certain parameters to set how a level should be generated: Size  Obstacles Frequency Enemies Frequency Coins Frequency Grass Frequency Level Progression Upon successfully completing a level within the designated time frame, players unlock the opportunity to progress to the next stage. Additionally, they have the option to re-do completed levels, either to amass additional in-game currency or to vie for top positions on the leaderboards. The accessibility of levels is facilitated through a user-friendly level select panel, enabling players to seamlessly navigate and choose their desired challenges. As players advance through the game, they will encounter escalating difficulty levels characterized by longer gameplay durations and more intricate obstacles, providing a progressively challenging and engaging experience.</p>"},{"location":"games_mowermayhem_gdd/#monetization","title":"Monetization","text":"<p>For monetization, we will use Unity\u2019s In-App Purchasing Service, since It supports both the Apple App Store and Google Play Store.</p>"},{"location":"games_mowermayhem_gdd/#in-app-purchases","title":"In-App Purchases","text":"<p>Coins No advertising subscription. Limited time offer.</p>"},{"location":"games_mowermayhem_gdd/#ads-strategy","title":"Ads Strategy","text":"<p>Advertisement video at end of level. Watch video to get bonus coins. Watch video to earn 2x, 3X, 5X Coins</p>"},{"location":"games_mowermayhem_gdd/#premium-features","title":"Premium Features","text":"<p>Subscription to remove advertising.</p>"},{"location":"games_mowermayhem_gdd/#technical-specifications","title":"Technical Specifications","text":""},{"location":"games_mowermayhem_gdd/#target-platforms","title":"Target Platforms","text":"<p>iOS Android</p>"},{"location":"games_mowermayhem_gdd/#target-devices","title":"Target Devices","text":"<p>Phone Tablet</p>"},{"location":"games_mowermayhem_publish/","title":"Mower Mayhem Release Checklist","text":""},{"location":"games_mowermayhem_publish/#about","title":"About","text":"<p>Before sending a release version of the game, there are several steps that we should do to make sure the APP is ready.</p>"},{"location":"games_mowermayhem_publish/#addressables","title":"Addressables","text":"<p>During the development of <code>Mower Mayhem</code>, we may make changes to assets such as <code>Levels</code>, <code>Models</code>, and <code>Fonts</code>. These assets are downloaded at the start of the game, so it\u2019s important to ensure they are correctly updated in the cloud.</p> <p>To test these updates:</p> <ul> <li>Select the <code>Cloud</code> option when building for mobile.</li> <li>Verify that the Levels, Models, and Fonts in the game match those in the Unity Editor.</li> </ul> <p>If it doesn't follow the steps on how to Update Addressables.</p>"},{"location":"games_mowermayhem_publish/#facebook-sdk","title":"FACEBOOK SDK","text":"<p>For the Facebook SDK we have two <code>IDs</code>, one for <code>Android</code> and another for <code>iOS</code>. Before building the APK, we need to make sure that we are using the correct <code>ID</code>.</p> <p>To check the settings:</p> <ol> <li>On the Unity Editor go to <code>Facebook -&gt; Edit Settings</code>.</li> <li>Change <code>Selected App Id</code> to the correct one depending on the current platform. </li> </ol>"},{"location":"games_mowermayhem_publish/#publish-steps","title":"Publish Steps","text":"<p>After checking the previous steps just follow the Github Upload Steps and then Android Upload Steps or iOS Upload Steps depending on the platform you are publishing for.</p>"},{"location":"mkdocs/","title":"MKDocs","text":"<p>The projects repo can be found here: Github Repo</p> <p>Documentation based on this tutorial: How To Create STUNNING Code Documentation With MkDocs Material Theme</p> <p>For full MKDocs documentation visit mkdocs.org.</p>"},{"location":"mkdocs/#about","title":"About","text":"<p>We are using MKdocs to create this documentation page, here's the necessary steps:</p>"},{"location":"mkdocs/#how-to-start","title":"How to start","text":"<ol> <li>Open Mkdocs project with Visual Studio Code.</li> <li>Open a new terminal <code>Terminal -&gt; New Terminal</code></li> <li>Make sure the terminal is on the <code>fisipgroup-mkdocs-documentation</code> directory.</li> <li>Call serve command:<ul> <li>Windows:      <pre><code>python -m mkdocs serve</code></pre></li> <li>Mac     <pre><code>mkdocs serve</code></pre></li> </ul> </li> <li> <p>Open the project link, it can be found at the end of the serve command's response:</p> <p>INFO    -  Building documentation...</p> <p>INFO    -  Cleaning site directory</p> <p>INFO    -  Documentation built in 0.48 seconds</p> <p>INFO    -  [18:43:38] Watching paths for changes: 'docs', 'mkdocs.yml'</p> <p>INFO    -  [18:43:38] Serving on http://127.0.0.1:8000/</p> </li> <li> <p>Edit <code>.md</code> files inside the <code>docs</code> and the mkdocs.yml files as necessary.</p> </li> <li>After saving the files, the local page will update accordingly.</li> </ol>"},{"location":"mkdocs/#how-to-update-github-pages","title":"How to update github pages","text":"<ol> <li><code>Commit</code> wanted changes to the <code>main</code> branch.      <p> The github pages will handle updating when the commit is pushed.</p></li> </ol>"}]}